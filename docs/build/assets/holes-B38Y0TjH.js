const _="HOLES",T=`
[Tap]
 Change holes
`,k=[],B={theme:"shape",isPlayingBgm:!0,isReplayEnabled:!0,isDrawingScoreFront:!0,audioSeed:2};let s,r,t,P,m,a,c;const u=1,n=.2,p=12;function L(){ticks||(s=[{pos:vec(10,0),vel:vec(),angle:0}],r=[],t={pos:vec(),wall:void 0},E(20,0),P=0,m=0,a=0,c=60),input.isJustPressed&&(play("laser"),m=m===0?1:0,c-=sqrt(difficulty)*9),color("light_yellow"),rect(0,0,5,99),rect(95,0,5,99),color("yellow"),t.pos.y-=a,addScore(a*s.length),line(t.pos,t.pos.x+1,t.pos.y,7),remove(r,e=>(e.pos.y-=a,e.pos.y<9&&e.pos.y--,(e.index<0||e.index===m)&&(color(`${e.pos.y<9?"light_":""}${e.angle===0?"green":"cyan"}`),bar(e.pos,e.length,4,e.angle===0?n:PI-n,0)),e.pos.y<-e.length*sin(n)));let v=0;remove(s,e=>{e.vel.y+=.2*sqrt(difficulty),e.vel.mul(1-.02*sqrt(difficulty)),e.pos.add(vec(e.vel).mul(sqrt(difficulty)*.5)),e.pos.y-=a,e.pos.y<c+20&&e.pos.y>v&&(v=e.pos.y),e.angle+=e.vel.x*.03+e.vel.y*.02,color("red");const l=arc(e.pos,u,3,e.angle,e.angle+PI*2).isColliding.rect;return l.yellow&&(play("coin"),addScore(s.length*10,e.pos),A(t.wall)),l.light_yellow&&x(e,e.pos.x<50?0:PI,"light_yellow"),l.green&&x(e,n-PI/2,"green"),l.cyan&&x(e,PI-n+PI/2,"cyan"),e.pos.y>99+u?(play("hit"),!0):e.pos.y<-u}),a=v>c?(v-c)*.1:0,c+=(60-c)*.01,s.length===0&&(play("explosion"),end()),s.forEach(e=>{s.forEach(l=>{l===e||l.pos.distanceTo(e.pos)>u*2||x(e,l.pos.angleTo(e.pos))})});function x(e,l,o){const i=wrap(e.vel.angle-l-PI,-PI,PI);if(abs(i)<PI/2&&e.vel.addWithAngle(l,e.vel.length*cos(i)*1.7),o!=null){color("transparent");for(let d=0;d<9&&(e.pos.addWithAngle(l,1),!!arc(e.pos,u).isColliding.rect[o]);d++);}}function E(e,l){t.pos.set(l===0?10:89,e);const o={pos:vec(l===0?7:93,e+9),length:9,angle:l,index:-1};r.push(o),t.wall=o}function A(e){s.length<9&&s.push({pos:vec(rnd(30,70),0),vel:vec(0,sqrt(difficulty)),angle:rnd(PI*2)});const l=e.pos.y,o=e.angle,i=[],d=80,S=p+9;for(let f=0;f<5;f++){const h=rnd(15,d-S/2-5);let y=!0;i.forEach(C=>{abs(h-C)<p+9&&(y=!1)}),y&&i.push(h)}i.sort();const g=vec(o===0?7:93,l),q=o===0?n:PI-n;let I;i.forEach(f=>{const h=f-p/2-(I==null?0:I+p/2)*(1/cos(n));r.push({pos:vec(g),length:h-5,angle:o,index:-1}),g.addWithAngle(q,h);const y=p*(1/cos(n));r.push({pos:vec(g),length:y-5,angle:o,index:P}),rnd()<.7&&(P=P===0?1:0),g.addWithAngle(q,y),I=f});const W=(d-(I+p/2))*(1/cos(n));r.push({pos:vec(g),length:W-5,angle:o,index:-1}),e.pos.y=-99,E(l+80*sin(n)+9,o===0?1:0)}}export{k as characters,T as description,B as options,_ as title,L as update};
